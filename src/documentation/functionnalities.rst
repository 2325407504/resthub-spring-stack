===============Functionalities===============This section describes RESThub functionalities that can help you to build your application.Generic classes===============Provides some generic classes and interfaces for default DAO, service or controller.* **Generic Dao** : RESThub provides a GenericDao that can handle any Entity, and provide also a Resource aware GenericDao.* **Generic CRUD services** : RESThub provides a reusable service classes that implements by default CRUD operations.* **Generic REST controllers** : Default JAX-RS controller with builtin CRUD operations with XML and JSON format. Based on `Jersey <https://jersey.dev.java.net/>`_.* **Generic test classes** : inherit from RESThub test in order to have by default test for your CRUD functionnalities. For example ::	public class PollServiceTest extends AbstractServiceTest<Poll, Long, PollService> {		}Include entities================Allow to scan entities in diffferent modules using the same Persitence Unit, which is not possible with default Spring/Hibernate.By default, the ScanningPersistenceUnitManager searches entities with the pattern.To indicates differents packages, you'll have to override the bean definition in your own Spring configuration file... code-block:: xml	<resthub:include-entities base-package="net.myProject.**.model" />Now, entities from the net/myProject/\*\*/model packages will be recognized.**Beware !** You have to be careful with the loading order of your spring configuration files.Reference the RESTHub file first (and don't forget the * behind "classpath"), and then your files.Include JAXB elements=====================RESThub provides helpers in order to add in JAX-RS context classes returns as generic collection like List<MyObject> because of type erasure issue in Java, Jersey has no way to know your class MyObject and you will get an exception when trying to serialize it.In order to make your class recognize by Jersey, add in your applicationContext.xml:.. code-block:: xml	<resthub:include-jaxb-elements base-package="net.myProject.**.model"/>Bean management===============You can provide a applicationContext.xml file to configure each module (framework of application) with Spring 3. You should use J2EE6 annotations to declare and inject your beans.To declare a bean::	@Named("beanName")	public class SampleClass {		}To inject a bean ::	@Inject	@Named("beanName")	public void setSampleProperty(...) {		}**Best practice** : Bean injection on setter is better than on protected or private property because it allows subclasses to override this injection.Tapestry 5 integration======================Todo