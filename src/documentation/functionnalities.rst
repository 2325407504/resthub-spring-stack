===============Functionalities===============This section describes RESThub functionalities that can help you to build your application. You will typically extends them in your class, for example ::	public class PollServiceTest extends AbstractServiceTest<Poll, Long, PollService> {		}Generic classes===============Provides some generic classes and interfaces for default DAO, service or controller.* **Generic test classes** : inherit from RESThub test in order to have by default test for your CRUD functionnalities.	* class AbstractTest : base class for your non transactional Spring aware unit tests	* class AbstractTransactionalTest : base class for your transactional unit tests, preconfigure Spring test framework	* class AbstractTransactionAwareTest : base class for your transaction aware unit tests	* class AbstractWebTest : base class for your unit test that need to run and embeded servlet container* **Dao** : GenericDao default CRUD operation	* interface GenericDao<T, ID extends Serializable> : generic DAO interface	* class GenericJpaDao<T, ID extends Serializable> : generic DAO JPA implementation	* class AbstractDaoTest<T, ID extends Serializable, D extends GenericDao<T, ID>> : generic DAO unit test * **Generic CRUD services** : RESThub provides a reusable service classes that implements by default CRUD operations.	* interface GenericService<T, ID extends Serializable> : generic service interface	* class GenericServiceImpl<T, ID extends Serializable, D extends GenericDao<T, ID>> : generic service default implementation	* class AbstractServiceTest<T, ID extends Serializable, D extends GenericService<T, ID>> : generic service unit test* **Generic REST controllers** : default JAX-RS controller with builtin CRUD operations, support XML and JSON format. Based on `Jersey <https://jersey.dev.java.net/>`_.	* class GenericController<T, ID extends Serializable, S extends GenericService<T, ID>> : generic controller	* class AbstractControllerTest<T, ID extends Serializable, S extends GenericService<T, ID>, C extends GenericController<T, ID, S>> : generic controller unit testInclude entities================Allow to scan entities in diffferent modules using the same Persitence Unit, which is not possible with default Spring/Hibernate.By default, the ScanningPersistenceUnitManager searches entities with the pattern.To indicates differents packages, you'll have to override the bean definition in your own Spring configuration file... code-block:: xml	<resthub:include-entities base-package="net.myProject.**.model" />Now, entities from the net/myProject/\*\*/model packages will be recognized.**Beware !** You have to be careful with the loading order of your spring configuration files.Reference the RESTHub file first (and don't forget the * behind "classpath"), and then your files.Include JAXB elements=====================RESThub provides helpers in order to add in JAX-RS context classes returns as generic collection like List<MyObject> because of type erasure issue in Java, Jersey has no way to know your class MyObject and you will get an exception when trying to serialize it.In order to make your class recognize by Jersey, add in your applicationContext.xml:.. code-block:: xml	<resthub:include-jaxb-elements base-package="net.myProject.**.model"/>Bean management===============You can provide a applicationContext.xml file to configure each module (framework of application) with Spring 3. You should use J2EE6 annotations to declare and inject your beans.To declare a bean::	@Named("beanName")	public class SampleClass {		}To inject a bean ::	@Inject	@Named("beanName")	public void setSampleProperty(...) {		}**Best practice** : Bean injection on setter is better than on protected or private property because it allows subclasses to override this injection.Tapestry 5 integration======================Resthub provides some simple tools to facilitate integration between resthub and its tools and `Tapestry5 Framework <http://tapestry.apache.org/index.html>`_. These tools are packed into a dedicated multi-module :https://github.com/pullrequest/resthub/tree/master/resthub-tapestry5.This multi-module resthub sub project contains 4 modules related to Tapestry5 - Resthub integration describes below.You can find a complete example of usage of these tools in the sample application : https://github.com/pullrequest/resthub/tree/master/resthub-apps/booking/booking-tapestry5Tapestry 5 components+++++++++++++++++++++This artefact provides some additional and usefull Tapestry5 components and mixins (not directly related to resthub).For the moment, one unique component  : * a **ZoneUpdater** allowing to update dynamically in AJAX a page zone from a form field. See full usage sample   here : `java class <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/pages/Search.java>`_   and `tml <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/resources/org/resthub/booking/webapp/t5/pages/Search.tml>`_This artefact can and should hold some other components if needed.Configuration-------------To use it, add to your pom dependencies : .. code-block:: xml   <dependency>      <groupId>org.resthub</groupId>      <artifactId>resthub-tapestry5-components</artifactId>      <version>1.1</version>   </dependency>Tapestry 5 jpa++++++++++++++This artefact provides some advanced features related to tapestry5 and jpa integration, one of the core resthub tool. This artefact is based on the `TynamoTapestry5 JPA integration <http://tynamo.org/tapestry-jpa+guide>`_It allows, for example, to manage JPA entities objects in page and components parameters while seeing only id in url. This is allowed by the fact thatthe artifact maintain a opened session and wrap calls to serialization and deserialization in order to retrieve an object from its id. Sample `here <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/components/hotel/HotelDisplay.java>`_This artefact provides also a complete integration between JPAEntityManager managed by Tapestry and those defined by Spring, another core tool of resthub.This is made possible by a `dedicated configuration Tapestry 5 Module <https://github.com/pullrequest/resthub/blob/master/resthub-tapestry5/resthub-tapestry5-jpa/src/main/java/org/resthub/tapestry5/jpa/services/ResthubJPAModule.java>`_ injecting the `entityManagerFactory` bean, considered as already defined by Spring.You can provide your own module in your application and complete or override this one in case of specific configurations.Configuration-------------To use it, add to your pom dependencies : .. code-block:: xml   <dependency>      <groupId>org.resthub</groupId>      <artifactId>resthub-tapestry5-jpa</artifactId>      <version>1.1</version>   </dependency>Tapestry 5 spring security++++++++++++++++++++++++++This artefact provides some advanced features related to tapestry5 and spring security integration. This artefact is based on the `localhost.nuTapestry5 Spring Security integration <http://www.localhost.nu/java/tapestry-spring-security/conf.html>`_It allows to integrate Tapestry5 ans Spring authentication and authorization mechanisms and provide some helpers and dedicated servicesin order to be able to manage in Tapestry5 pages :* **login** :   wrap login methods and allows to perform a programatic login : samples `here <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/pages/Signup.java>`_  and `here <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/components/Layout.java>`_ (see `Authenticator`)* **signin** :   wrap signin methods and allows to perform a programatic signin : `Sample <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/pages/Signin.java>`_* **logout** :  wrap logout methods and allows to perform a programatic logout : `Sample <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/components/Layout.java>`_This artifact provide also some security components to use in your tml (see `here <http://www.localhost.nu/java/tapestry-spring-security/ref/index.html>`_).This is configured by a dedicated configuration Tapestry5 Spring Security that you have to add to your application (see `here <https://github.com/pullrequest/resthub/blob/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/services/BookingSecurityModule.java>`_ for a sample).This configuration file define all options fo spring security integration.Configuration-------------To use it, add to your pom dependencies : .. code-block:: xml   <dependency>      <groupId>org.resthub</groupId>      <artifactId>resthub-tapestry5-spring-security</artifactId>      <version>1.1</version>   </dependency>Tapestry 5 integration++++++++++++++++++++++This artifact is a simple wrapper to integrate other Resthub Tapestry5 contribution in order to make it easier.It provides a global `Tapestry5 configuration module <https://github.com/pullrequest/resthub/blob/master/resthub-tapestry5/resthub-tapestry5-integration/src/main/java/org/resthub/tapestry5/services/ResthubModule.java>`_to integrate tapestry-jpa and tapestry-components modules. This artifact also include the configuration for Tapestry5 and BeanValidation integration : see `here <https://github.com/pullrequest/resthub/blob/master/resthub-tapestry5/resthub-tapestry5-integration/src/main/java/org/resthub/tapestry5/validation/services/ResthubValidationModule.java>`_This inclusion is possible thanks to `@SubModule` annotation.This artifact does not integrate tapestry-spring-security to not force its usage.You can configure the integration of this artifact by providing in your application a dedicated Tapestry5 module and/or overriding these modules(see `sample <https://github.com/pullrequest/resthub/tree/master/resthub-apps/booking/booking-tapestry5/src/main/java/org/resthub/booking/webapp/t5/services>`_)Configuration-------------To use it, add to your pom dependencies : .. code-block:: xml   <dependency>      <groupId>org.resthub</groupId>      <artifactId>resthub-tapestry5-integration</artifactId>      <version>1.1</version>   </dependency>